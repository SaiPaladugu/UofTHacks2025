pragma language_version >= 0.12.1;

import CompactStandardLibrary;

export enum STATE { vacant, occupied }

export ledger state: Cell<STATE>;
export ledger message: Cell<Maybe<Opaque<"string">>>;
export ledger instance: Counter;
export ledger poster: Cell<Bytes<32>>;

// New properties for LocationBoard
export ledger image: Cell<Maybe<Opaque<"string">>>;
export ledger user: Cell<Maybe<Opaque<"string">>>;
export ledger imageUrl: Cell<Maybe<Opaque<"string">>>;
export ledger latitude: Cell<Maybe<Field>>;
export ledger longitude: Cell<Maybe<Field>>;

constructor() {
    state = STATE.vacant;
    message = none<Opaque<"string">>();
    image = none<Opaque<"string">>();
    user = none<Opaque<"string">>();
    imageUrl = none<Opaque<"string">>();
    latitude = none<Field>();
    longitude = none<Field>();
    instance.increment(1);
}

witness local_secret_key(): Bytes<32>;

export circuit post(new_message: Opaque<"string">, new_image: Opaque<"string">, new_user: Opaque<"string">, new_imageUrl: Opaque<"string">, new_latitude: Field, new_longitude: Field): Void {
    assert state == STATE.vacant
        "Attempted to post to an occupied board";
    poster = public_key(local_secret_key(), instance as Field as Bytes<32>);
    message = some<Opaque<"string">>(new_message);
    image = some<Opaque<"string">>(new_image);
    user = some<Opaque<"string">>(new_user);
    imageUrl = some<Opaque<"string">>(new_imageUrl);
    latitude = some<Field>(new_latitude);
    longitude = some<Field>(new_longitude);
    state = STATE.occupied;
}

export circuit take_down(): Opaque<"string"> {
    assert state == STATE.occupied
        "Attempted to take down post from an empty board";
    assert poster == public_key(local_secret_key(), instance as Field as Bytes<32>)
        "Attempted to take down post, but not the current poster";
    const former_msg = message.value;
    state = STATE.vacant;
    instance.increment(1);
    message = none<Opaque<"string">>();
    image = none<Opaque<"string">>();
    user = none<Opaque<"string">>();
    imageUrl = none<Opaque<"string">>();
    latitude = none<Field>();
    longitude = none<Field>();
    return former_msg;
}

export circuit public_key(sk: Bytes<32>, instance: Bytes<32>): Bytes<32> {
    return persistent_hash<Vector<2, Bytes<32>>>([persistent_hash<Vector<2, Bytes<32>>>([pad(32, "locationboard:pk:"), instance]), sk]);
}
